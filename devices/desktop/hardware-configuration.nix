# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:
let
  xone-module = pkgs.callPackage ./xone/default.nix {
    # Make sure the module targets the same kernel as your system is using.
    kernel = config.boot.kernelPackages.kernel;
  };
in
{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" xone-module ];
  boot = {
    blacklistedKernelModules = [ "xpad" "mt76x2u" ];
  };
  hardware.firmware = [ pkgs.xow_dongle-firmware ];

  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/9eccd7ad-efa4-4cc8-9ae6-1964d8bcfd80";
      fsType = "btrfs";
      options = [ "subvol=@" ];
    };
  fileSystems."/home/nwright/Vault" =
    {
      device = "/dev/disk/by-uuid/a0bbbf4d-57ba-42f6-9541-4777e45885c3";
      fsType = "btrfs";
      options = [ "subvol=@nwright-vault" ];
    };


  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp11s0f3u1u3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
